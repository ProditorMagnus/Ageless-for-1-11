#textdomain wesnoth-Ageless_Era

[event]
    name=prestart
    [set_variable]
        name=era_version
        value={AE_VERSION_NUMBER}
    [/set_variable]
[/event]

# version check
[event]
    name = "start"
    [lua]
        code = <<
		wesnoth.wml_actions.store_ae_version = function(cfg)
			if wesnoth.have_file( "~add-ons/Ageless_Era/data/version.lua") then
				wesnoth.dofile "~add-ons/Ageless_Era/data/version.lua"
				wesnoth.set_variable(cfg.variable, AE_local_version)
			else
				wesnoth.set_variable(cfg.variable, "invalid! Needs to download ageless!")
			end
		end
	>>
    [/lua]
    [store_ae_version]
        variable = "AE_local_version"
    [/store_ae_version]
    [set_global_variable]
        from_local = "AE_local_version"
        to_global = "AE_local_version"
        namespace = "AE_"
        immediate = yes
        side = "global"
    [/set_global_variable]
    [foreach_side]
        variable = "AE_var_side"
        [get_global_variable]
            to_local = "AE_remote_version"
            from_global = "AE_local_version"
            namespace = "AE_"
            immediate = yes
            side = "$AE_var_side"
        [/get_global_variable]

        [lua]
            code = <<
			wesnoth.set_variable("AE_debug_versions_side_"..wesnoth.get_variable("AE_var_side"),wesnoth.get_variable("AE_remote_version"))
			if wesnoth.get_variable("AE_remote_version") == wesnoth.get_variable("era_version") then
			
			else
				wesnoth.message("Ageless Era","Side "..wesnoth.get_variable("AE_var_side").." uses Ageless version "..wesnoth.get_variable("AE_remote_version").." but only host version "..wesnoth.get_variable("era_version").." is accepted in current game.")
			end
			>>
        [/lua]
    [/foreach_side]
    {CLEAR_VARIABLE AE_local_version,AE_remote_version,AE_var_side}
[/event]
