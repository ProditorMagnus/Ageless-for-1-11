#textdomain wesnoth-Ageless_Era

# wmllint: unbalanced-on
#define AE_STEELHIVE_WEAPON_SPECIAL_KNOCKBACK
    [knockback]
        id=AE_agl_knockback
        name= _ "knockback"
        female_name= _ "female^knockback"
        description=_ "When a unit is hit with a knockback attack, it is immediately pushed back one hex away from the attacker. Units cannot be knocked back into an occupied hex, out of villages or onto terrain they normally could not move to. Only works on offense."
    [/knockback] # wmlxgettext: [specials]
[/specials] # wmlxgettext: [attack]
[/attack]
[event]
    name=attacker hits
    first_time_only=no
    id=AE_agl_knockback_event
    [filter_attack]
        special=AE_agl_knockback
    [/filter_attack]

    [filter_second]
        [not]
            [filter_location]
                terrain=*^V*
            [/filter_location]
        [/not]
    [/filter_second]

    [if]
        [variable]
            name=second_unit.hitpoints
            greater_than=0
        [/variable]

        [then]
            [if]
                [have_unit]
                    x,y=$x1,$y1
                    [filter_adjacent]
                        x,y=$x2,$y2
                        adjacent=n
                    [/filter_adjacent]
                [/have_unit]
                [then]
                    {VARIABLE knockback_direction n}
                [/then]
                [else]
                    [if]
                        [have_unit]
                            x,y=$x1,$y1
                            [filter_adjacent]
                                x,y=$x2,$y2
                                adjacent=ne
                            [/filter_adjacent]
                        [/have_unit]
                        [then]
                            {VARIABLE knockback_direction ne}
                        [/then]
                        [else]
                            [if]
                                [have_unit]
                                    x,y=$x1,$y1
                                    [filter_adjacent]
                                        x,y=$x2,$y2
                                        adjacent=se
                                    [/filter_adjacent]
                                [/have_unit]
                                [then]
                                    {VARIABLE knockback_direction se}
                                [/then]
                                [else]
                                    [if]
                                        [have_unit]
                                            x,y=$x1,$y1
                                            [filter_adjacent]
                                                x,y=$x2,$y2
                                                adjacent=s
                                            [/filter_adjacent]
                                        [/have_unit]
                                        [then]
                                            {VARIABLE knockback_direction s}
                                        [/then]
                                        [else]
                                            [if]
                                                [have_unit]
                                                    x,y=$x1,$y1
                                                    [filter_adjacent]
                                                        x,y=$x2,$y2
                                                        adjacent=sw
                                                    [/filter_adjacent]
                                                [/have_unit]
                                                [then]
                                                    {VARIABLE knockback_direction sw}
                                                [/then]
                                                [else]
                                                    [if]
                                                        [have_unit]
                                                            x,y=$x1,$y1
                                                            [filter_adjacent]
                                                                x,y=$x2,$y2
                                                                adjacent=nw
                                                            [/filter_adjacent]
                                                        [/have_unit]
                                                        [then]
                                                            {VARIABLE knockback_direction nw}
                                                        [/then]
                                                    [/if]
                                                [/else]
                                            [/if]
                                        [/else]
                                    [/if]
                                [/else]
                            [/if]
                        [/else]
                    [/if]
                [/else]
            [/if]

            [store_locations]
                [not]
                    [filter]
                    [/filter]
                [/not]
                #terrain=!,Q*,Q*^*,*^Q*,Mv,X*,X*^*,*^X*,_*^*,*^_*
                [filter_adjacent_location]
                    x,y=$x2,$y2
                    adjacent=-$knockback_direction
                [/filter_adjacent_location]

                variable=knockback_target_hex
            [/store_locations]
            [lua]
                code=<<
local u = wesnoth.get_unit(wesnoth.get_variable("second_unit.x"),wesnoth.get_variable("second_unit.y"))
local t = wesnoth.get_variable("knockback_target_hex[0].terrain")
if t then
	local move_cost = wesnoth.unit_movement_cost(u, t)
	if(move_cost>19) then
		wesnoth.set_variable("knockback_target_hex")
	end
end
				>>
            [/lua]

            [if]
                [variable]
                    name=knockback_target_hex.length
                    greater_than=0
                [/variable]

                [then]
                    [teleport]
                        [filter]
                            x,y=$x2,$y2
                        [/filter]

                        x,y=$knockback_target_hex.x,$knockback_target_hex.y
                        ignore_passability=yes
                    [/teleport]

                    [if]
                        [have_unit]
                            x,y=$knockback_target_hex.x,$knockback_target_hex.y
                        [/have_unit]

                        [then]
                            [sound]
                                name=fist.ogg
                            [/sound]

                            # the knockbacked unit doesn't seem to receive experience by default,
                            # so we need to add it manually
                            [store_unit]
                                [filter]
                                    x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                [/filter]

                                kill=yes
                                variable=knockbacked
                            [/store_unit]

                            {VARIABLE_OP knockbacked.experience add $unit.level}

                            [unstore_unit]
                                variable=knockbacked
                                text= _ "knockback"
                                {COLOR_HARM}
                                advance=true
                            [/unstore_unit]

                            {CLEAR_VARIABLE knockbacked}
                        [/then]
                    [/if]
                [/then]
            [/if]

            {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
        [/then]
    [/if]
[/event]
[+attack]
    [+specials]
        # wmlxgettext: [/specials]
        # wmlxgettext: [/attack]
#enddef
# wmllint: unbalanced-off
