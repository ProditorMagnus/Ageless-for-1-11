#textdomain wesnoth-Ageless_Era

#define AE_ARCHAIC_WEAPON_SPECIAL_TIE
    [chance_to_hit]
        id=aa_tie
        name= _ "tie-down"
        description=_"
Defender cannot move for any turn in which the attacker is adjacent at start, but they can still attack."
        value=30
        cumulative=yes
    [/chance_to_hit]
#enddef

#define AE_ARCHAIC_WEAPON_TIE_EVENTS

    # attacker hits, the unit is caught
    [event]
        name=attacker_hits
        first_time_only=no
        [filter_attack]
            name=rope
        [/filter_attack]
        [store_unit]
            [filter]
                x,y=$x2,$y2
            [/filter]
            variable=caught_temp
            kill=yes
        [/store_unit]
        [set_variable]
            name=caught_temp.variables.roper_id
            value=$unit.id
        [/set_variable]
        [set_variable]
            name=caught_temp.moves
            value=0
        [/set_variable]
        [unstore_unit]
            variable=caught_temp
        [/unstore_unit]
        {CLEAR_VARIABLE caught_temp}
    [/event]

    # make the caught unit lose its moves this turn if the attacker is adjacent at start
    # this seems artificial, but it eliminates the side number advantage (I think ...)
    [event]
        name=turn refresh
        first_time_only=no
        # first, store all units with rope attacker adjacent
        [store_unit]
            [filter]
                [filter_adjacent]
                    has_weapon=rope
                    is_enemy=yes
                [/filter_adjacent]
                side=$side_number
            [/filter]
            variable=caught_temp
            kill=no
        [/store_unit]
        #	{DEBUG_MSG "$caught_temp[0].id"}
        # then, store all rope attacker units adjacent
        {FOREACH caught_temp i}
            #	{DEBUG_MSG "$caught_temp[$i].id"}
            #	{DEBUG_MSG "$caught_temp[$i].variables.roper_id"}
            [store_unit]
                [filter]
                    has_weapon=rope
                    [and]
                        [filter_adjacent]
                            id=$caught_temp[$i].id
                            is_enemy=yes
                        [/filter_adjacent]
                    [/and]
                [/filter]
                variable=roper_temp
                kill=no
            [/store_unit]
            # this indicates the roper is not being stored
            #	{DEBUG_MSG "the roper is $roper_temp[$i].id"}
            # fixed
            #	[set_variable]
            #	     name=doloophack
            #	     value=$caught_temp[$i].variables.roper_id
            #	[/set_variable]
            #	{DEBUG_MSG "this is being passed into second loop: $doloophack|"}
            {FOREACH roper_temp j}
                # see if any of the stored ropers id match variables.roper_id
                [if]
                    [variable]
                        name=roper_temp[$j].id
                        #		equals=$doloophack
                        equals=$caught_temp[$i].variables.roper_id
                    [/variable]
                    [then]
                        [set_variable]
                            name=caught_temp[$i].moves
                            value=0
                        [/set_variable]
                        #	{DEBUG_MSG "This is the caught unit id: $caught_temp[$i].id"}
                    [/then]
                    [else]
                        #	{DEBUG_MSG "$doloophack| is not $roper_temp[$j].id|"}
                        #	{DEBUG_MSG "$caught_temp[$i].variable.roper_id| is not $roper_temp[$j].id|"}
                    [/else]
                [/if]
            {NEXT j}
            {CLEAR_VARIABLE roper_temp}
            [unstore_unit]
                variable=caught_temp[$i]
                find_vacant=no
            [/unstore_unit]
        {NEXT i}
        {CLEAR_VARIABLE caught_temp}
    [/event]
#enddef
